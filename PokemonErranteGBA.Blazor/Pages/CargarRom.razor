@page "/CargarRom"

@using Blazor.FileReader

@inject IFileReaderService fileReaderService
@inject IJSRuntime JS
<h3>Cargar Rom</h3>
<input type="file" @ref="inpCargarRom" @onchange="CargarRomMethod" accept=".gba" />

@code {
    [CascadingParameter] RomPokemon Rom { get; set; }
    ElementReference inpCargarRom;
    async Task CargarRomMethod()
    {
        const int BUFFER = 400 * 1024;
        RomGba rom;
        foreach (IFileReference file in await fileReaderService.CreateReference(inpCargarRom).EnumerateFilesAsync())
        {
            rom = new RomGba(await file.Read(BUFFER));

            if (!PokemonErrante.EsCompatible(EdicionPokemon.GetEdicionPokemon(rom), rom.Edicion.Compilacion))
            {
                Rom= null;
                await JS.MostrarMensajeAsync("La rom no es compatible");

            }
            else
            {
                Rom = new RomPokemon();
                Rom.ImagenesPokemon = PokemonGBAFrameWork.Pokemon.Sprite.Frontales.GetFrontales(rom).ElementosNuevos.Select((f) => PokemonGBAFramework.Pokemon.Sprites.Frontales.Serializador.GetObject(f.Value.Data) as PokemonGBAFramework.Pokemon.Sprites.Frontales).ToList();
                Rom.StatsPokemon = PokemonGBAFrameWork.Pokemon.Stats.GetStats(rom).ElementosNuevos.Select((s) => PokemonGBAFramework.Pokemon.StatsPokemon.Serializador.GetObject(s.Value.Data) as PokemonGBAFramework.Pokemon.StatsPokemon).ToList();
               
                Console.WriteLine("Se ha cargado la rom correctamente");

            }

        }
    }

}
